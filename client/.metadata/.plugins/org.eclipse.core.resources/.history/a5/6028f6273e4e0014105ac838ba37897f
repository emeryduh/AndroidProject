package com.comp313;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.support.v7.app.ActionBarActivity;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.StrictMode;
import android.view.Menu;
import android.view.MenuItem;
import android.view.Window;
import android.widget.EditText;
import android.widget.TextView;

public class RegistrationActivity extends Activity {

	// holds the return user id
	private String strUserId;

	// holds the error response
	private String strResponse;

	// user agent
	private final String USER_AGENT = "Mozilla/5.0";

	// instance variable for input fields
	private EditText txtUserName, txtNickName, txtEmail, txtPassword,
			txtConfirmPassword;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// hide the title bar
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);

		/*
		 * StrictMode.ThreadPolicy policy = new
		 * StrictMode.ThreadPolicy.Builder() .permitAll().build();
		 * StrictMode.setThreadPolicy(policy);
		 */

		setContentView(R.layout.activity_registration);

		// gets the font style to asset resource
		Typeface type = Typeface.createFromAsset(getAssets(),
				"fonts/DEVROYE.ttf");

		// gets the text view instance using id
		TextView tvHeader = (TextView) findViewById(R.id.tvLogoText);

		// sets the font style to text view
		tvHeader.setTypeface(type);

		// gets the instance of user name edit text
		txtUserName = (EditText) findViewById(R.id.txtUserName);

		// gets the instance of nick name edit text
		txtNickName = (EditText) findViewById(R.id.txtNickName);

		// gets the instance of email edit text
		txtEmail = (EditText) findViewById(R.id.txtEmail);

		// gets the instance of password edit text
		txtPassword = (EditText) findViewById(R.id.txtPassword);

		// gets the instance of confirm password edit text
		txtConfirmPassword = (EditText) findViewById(R.id.txtConfirmPassword);
	}

	// occurs when user clicks button
	private void callIntent(android.view.View view) {
		
		switch (view.getId()) {
		case R.id.btnSubmit:

			// Parse fields to strings for validation

			final String username = txtUserName.getText().toString();
			final String nickname = txtNickName.getText().toString();
			final String email = txtEmail.getText().toString();
			final String password = txtPassword.getText().toString();
			final String confirmPassword = txtConfirmPassword.getText()
					.toString();

			// Popup error message if not valid
			/*//Migrated into their methods
			if (!validateUsername(username))
				txtUserName.setError("Username has to be longer than 6 characters!");
			if (!validateNickname(nickname))
				txtNickName.setError("Nickname has to be longer than 6 characters!");
			if (!validateEmail(email))
				txtEmail.setError("Invalid Email");
			if (!validatePassword(password))
				txtPassword.setError("Password has to be longer than 6 characters!");
			if (!validateConfirmPassword(confirmPassword))
				txtConfirmPassword.setError("Confirmed Password has to be longer than 6 characters!");
				*/

			if (validateUsername(username) && validateNickname(nickname)
					&& validateEmail(email) && validatePassword(password)
					&& validateConfirmPassword(confirmPassword)) {
				startActivity(new Intent(this, LoginActivity.class));
			}

			// String strUserId = registerUser();

			break;
		}
	}

	private String registerUser() throws ClientProtocolException, IOException {

		HttpClient client = new DefaultHttpClient();
		HttpPost post = new HttpPost(Utility.registerURL);

		// add header
		post.setHeader("User-Agent", USER_AGENT);

		List<NameValuePair> urlParameters = new ArrayList<NameValuePair>();
		urlParameters.add(new BasicNameValuePair("username", txtUserName
				.getText().toString()));
		urlParameters.add(new BasicNameValuePair("nickname", txtNickName
				.getText().toString()));
		urlParameters.add(new BasicNameValuePair("email", txtEmail.getText()
				.toString()));
		urlParameters.add(new BasicNameValuePair("password", txtPassword
				.getText().toString()));

		post.setEntity(new UrlEncodedFormEntity(urlParameters));

		HttpResponse response = client.execute(post);
		System.out.println("\nSending 'POST' request to URL : "
				+ Utility.registerURL);
		System.out.println("Post parameters : " + post.getEntity());
		System.out.println("Response Code : "
				+ response.getStatusLine().getStatusCode());

		BufferedReader rd = new BufferedReader(new InputStreamReader(response
				.getEntity().getContent()));

		StringBuffer result = new StringBuffer();
		String line = "";
		while ((line = rd.readLine()) != null) {
			result.append(line);
		}
		return strUserId;
	}
	
	private boolean validateUsername(String txtUserName) {
		if (txtUserName != null && txtUserName.length() > 6) {
			return true;
		} else {
			this.txtUserName.setError("Username has to be longer than 6 characters!");
			return false;
		}
	}

	private boolean validateNickname(String txtNickName) {
		if (txtNickName != null && txtNickName.length() > 6) {
			return true;
		} else {
			this.txtNickName.setError("Nickname has to be longer than 6 characters!");
			return false;
		}
	}

	private boolean validateEmail(String txtEmail) {
		if (txtEmail != null
				&& android.util.Patterns.EMAIL_ADDRESS.matcher(txtEmail)
						.matches()) {
			return true;
		} else {
			this.txtEmail.setError("Invalid Email");
			return false;
		}
	}

	private boolean validatePassword(String txtPassword) {
		if (txtPassword != null && txtPassword.length() > 6) {
			return true;
		} else {
			this.txtPassword.setError("Password has to be longer than 6 characters!");
			return false;
		}
	}

	private boolean validateConfirmPassword(String txtConfirmPassword) {
		if (txtConfirmPassword != null && txtPassword.length() > 6) {
			return true;
		} else {
			this.txtConfirmPassword.setError("Confirmed Password has to be longer than 6 characters!");
			return false;
		}
	}

}
